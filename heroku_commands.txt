*** ‚≠êÔ∏è HEROKU COMMANDS ‚≠êÔ∏è ***
-- Install on macOS --
$ brew tap heroku/brew && brew install heroku

Source: https://devcenter.heroku.com/articles/heroku-cli#verify-your-installation

-- Basic commands -- 
$ heroku --version
$ heroku login
$ heroku login -i

-- Create an app --
$ cd ~/myapp
$ heroku create

-- Access existing app remotely --
$ heroku git:remote -a <app-name>


-- Push changes to Heroku --
$ git push heroku master

-- Dependencies --
Heroku does not use SQLite, uses PostgreSQL
-Have a requirements.txt (to update use: $ pip freeze > requirements.txt)
-use venv, install flask, psycopg2(for db), gunicorn (HTTP server)
-create db in Heroku

-- Check db via CLI --
$ heroku pg:psql <heroku-db-name> --app <heroku-app-name>
-to check tables use: $ \dt
-to check each table, the usual SQL command applies: $ SELECT * FROM table_name;
-to exit pg db, it's not .exit, and not exit(), and not :wq and not quit, it's: \q

-- Known macOS Errors and Fixes --
# Heroku login
-if get an IP mismatch error, login with -i in CLI: $ heroku login -i
-if MFA enabled, generate an authorization token for API access, as per below SO source:
 https://stackoverflow.com/questions/63363085/ip-address-mismatch-on-signing-into-heroku-cli

# Source to fix libpq errors on macOS - https://github.com/orgs/Homebrew/discussions/3595

# How to fix psycopg2 errors:
-activate virtual environment: $ source .venv/bin/activate
-check Python version: $ python --version
- $ pip install psycopg2
- $ pip install psycopg2-binary <-- the magic that fixed the error
- $ pip show psycopg2
- run the app: $ python app.py
NOTE: source ChatGPT üôè

# How to fix 'Aplication Error' on Heroku
-check the logs via CLI: $ heroku logs --tail
-if logs are are about Flask or other dependencies, reinstall and update requirements.txt
-then:
$ git add requirements.txt
$ git commit -m "Add Flask to requirements.txt"
$ git push heroku master
NOTE: source ChatGPT üíõ

# How to fix secret keys/multiple dynos issue which keeps re-logging the user
The issue is that each dyno has it's own secret key that is generated (source code by the os.urandom()), 
thus same user can bounce between dyno's (loged in on one and not the other)
Solutions:
- have a static secret key (DO NOT have secret keys in the source code) - find another solution
- use Heroku configuration and import it from environment variable - learn how to do that here:
https://stackoverflow.com/questions/73509882/how-to-configure-using-heroku-environment-variables-from-flask-app
https://devcenter.heroku.com/articles/config-vars

# Create a random secret key and store in Heroku app settings
- to create: 
go to CLI, type $ python
>> import os
>> os.urandom(24) <-this will generate a 24 char string, store it in the heroku app setting
